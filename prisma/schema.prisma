generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int             @id @default(autoincrement())
  firstName String
  lastName  String
  mobileNo  String
  stateId   Int
  cityId    Int
  address   String
  email     String          @unique
  status    Status          @default(Active)
  password  String
  updatedAt DateTime        @updatedAt
  createdAt DateTime        @default(now())
  roles     UserRoleLink[]

  // Relations
  state     State           @relation(fields: [stateId], references: [id])
  city      City            @relation(fields: [cityId], references: [id])
}

model UserRole {
  id           Int             @id @default(autoincrement())
  userRoleName String          @unique
  updatedAt    DateTime        @updatedAt
  createdAt    DateTime        @default(now())
  links        UserRoleLink[]
}

model UserRoleLink {
  id        Int       @id @default(autoincrement())
  userId    Int
  roleId    Int
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())

  // Relations
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // Ensure a user cannot have the same role multiple times
  @@unique([userId, roleId])
}

model State {
  id        Int      @id @default(autoincrement())
  stateName String
  cities    City[]  // One-to-many relationship with City
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Inverse relation to User
  users     User[]  // This defines the inverse relation to the 'User' model
}

model City {
  id        Int      @id @default(autoincrement())
  stateId   Int
  state     State    @relation(fields: [stateId], references: [id])
  cityName  String 
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Inverse relation to User
  users     User[]   // This defines the inverse relation to the 'User' model
}

enum Status {
  Active
  Inactive
  Deleted
}
