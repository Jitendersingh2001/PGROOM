generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String    @db.VarChar
  lastName    String    @db.VarChar
  mobileNo    String    @unique @db.VarChar
  address     String?   @db.VarChar
  stateId     Int
  cityId      Int
  status      Status
  email       String    @unique @db.VarChar
  password    String    @db.VarChar
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userRoleLink UserRoleLink[]
  userProperties UserProperties[]
  tenant Tenant[]
  state     State           @relation(fields: [stateId], references: [id])
  city      City            @relation(fields: [cityId], references: [id])
}

model UserRole {
  id        Int       @id @default(autoincrement())
  roles     Roles
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userRoleLink UserRoleLink[]
}

model UserRoleLink {
  id        Int       @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  userRole  UserRole  @relation(fields: [roleId], references: [id])
}

model UserProperties {
  id            Int       @id @default(autoincrement())
  userId        Int
  state         Int
  city          Int
  propertyName  String    @db.VarChar
  propertyImage String    @db.VarChar
  propertyContact String  @db.VarChar
  propertyAddress String @db.VarChar
  status        PropertyStatus
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])
  rooms         Rooms[]
  tenant        Tenant[]
}

model Rooms {
  id            Int       @id @default(autoincrement())
  propertyId    Int
  roomNo        Int
  roomImage     String    @db.VarChar // that will have the s3 bucket link
  status        RoomStatus
  description   String   @db.VarChar
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userProperties UserProperties @relation(fields: [propertyId], references: [id])
  tenant         Tenant[]
  rent           Rent[]
  electricityBill ElectricityBill[]
}

model Tenant {
  id          Int       @id @default(autoincrement())
  userId      Int
  propertyId  Int
  roomId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id])
  userProperties UserProperties @relation(fields: [propertyId], references: [id])
  rooms         Rooms    @relation(fields: [roomId], references: [id])
}

model Rent {
  id            Int       @id @default(autoincrement())
  amount        Int
  roomId        Int
  paymentMethod PaymentMethod
  upiId         String?   @db.VarChar //if rent is paid by upi
  status        RentStatus
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  rooms         Rooms    @relation(fields: [roomId], references: [id])
}

model ElectricityBill {
  id            Int       @id @default(autoincrement())
  roomId        Int
  amount        Int
  paymentMethod PaymentMethod
  upiId         String?   @db.VarChar //if E-Bill is paid by upi
  status        BillStatus
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  rooms         Rooms    @relation(fields: [roomId], references: [id])
}

model State {
  id        Int      @id @default(autoincrement())
  stateName String
  cities    City[]  // One-to-many relationship with City
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Inverse relation to User
  users     User[]  // This defines the inverse relation to the 'User' model
}

model City {
  id        Int      @id @default(autoincrement())
  stateId   Int
  state     State    @relation(fields: [stateId], references: [id])
  cityName  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Inverse relation to User
  users     User[]   // This defines the inverse relation to the 'User' model
}

enum Status {
  Active
  Deleted
  Invited
}

enum Roles {
  SuperAdmin
  Admin
  Tenant
}

enum PropertyStatus {
  Active
  Inactive
  Deleted
}

enum RoomStatus {
  Available
  Occupied
}

enum PaymentMethod {
  Cash
  UPI
}

enum RentStatus {
  Paid
  Unpaid
}

enum BillStatus {
  Paid
  Unpaid
}
